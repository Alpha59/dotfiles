#!/usr/bin/env bash

# requires
# a pmd ~/ruleset/quickstart.xml
# a checkstyle ~/ruleset/checkstyle.xml
# a clang-format file ~/ruleset/.clang-format
# a clang-format file ~/ruleset/.pre-commit-config.yaml

## TODO:
# Catch ctrl-C and re-checkout feature branch

if [ "$#" -lt 1 ]; then
  echo "";
  echo "usage: $0 SIM-ISSUE [-i]{0,2} [-v]{0,2} [-q] [--no-cr] [--cr-pull <CR-12345678:1>] [--WIP] [--no-install]" >&2;
  echo "";
  echo "";
  echo "OPTIONS:";
  echo "        -i First -i will ignore static analyis" >&2;
  echo "           Second -i will ignore inclusive analyis" >&2;
  echo "        -v First -v will increase verbosity" >&2;
  echo "           Second -v will increase verbosity more" >&2;
  echo "";
  echo "        -c, --no-cr will prevent this script from creating a CR regardless of results" >&2;
  #echo "        --cr-pull <CR-12345678:1> will pull an existing CR for anaysis" >&2;
  echo "        -q, --no-questions will supress the printing of CR Questions";
  #echo "        --no-install will prevent the installation of missing tools" >&2;
  echo "";
  echo "        -m, --message <message> will use a pre-defined commit message and not prompt for a message" >&2;
  echo "        -p, --parent <branch> will change the parent branch to not be mainline" >&2;
  echo "";
  echo "        --no-notify will prevent OS notifications" >&2;
  echo "        --no-save will not run git add -A " >&2;
  echo "        --no-verify will skip all verification steps and proceed to open a CR" >&2;
  echo "        --no-gk will skip running any gordian knot analysis" >&2;
  echo "        --ff-gk will run GK with skip option where possible (meant for secondary runs)" >&2;
  echo "        --allow-live will allow the versionset to be live" >&2;
  echo "        --no-format will prevent formatters from running automatically" >&2;
  echo "        --no-message-verify will skip commit message verification" >&2;
  echo "";
  echo "";
  echo "";

  exit 1;
fi

ignore=0;
verbose=0;
nocr=false;
questions=true;
parent="mainline"
noGK=false;
ffGK=false;
noMessageVerify=false;
noNotify=false;
noSave=false;
allowLive=false;
noFormat=false;

noInstall=false; #TODO
crpull="";

issue="$1";
BRANCH="$(git rev-parse --abbrev-ref HEAD)"
branch="$USER/$1";
if [[ "$BRANCH" != "mainline" ]]; then
    branch=$BRANCH;
fi
package=${PWD##*/};

CHECK_STYLE_VERSION="9.0"
for var in "$@"
do
    if [[ "$var" == "-i" ]]; then
        ignore+=1;
    elif [[ "$var" == "-v" ]]; then
        verbose+=1;
    elif [[ "$var" == "--no-cr"  ]] || [[ "$var" == "-c" ]]; then
        nocr=true;
    elif [[ "$var" == "--cr-pull" ]]; then
        crPull="next";
    elif [[ "$crpull" == "next" ]]; then
        cr-pull=$var;
        noSave=true;
        nocr=true;
    elif [[ "$var" == "--parent"  ]] || [[ $var == "-p" ]]; then
        parent="next"
    elif [[ "$parent" == "next" ]]; then
        parent=$var;
    elif [[ "$var" == "-q"  ]] || [[ "$var" == "--no-questions" ]]; then
        questions=true;
    elif [[ "$var" == "--WIP" ]]; then
        wip=true;
    elif [[ "$var" == "--no-install" ]]; then
        noInstall=true;
    elif [[ "$var" == "--no-notify" ]]; then
        noNotify=true;
    elif [[ "$var" == "--no-save" ]]; then
        noSave=true;
    elif [[ "$var" == "--no-gk" ]]; then
        noGK=true;
    elif [[ "$var" == "--ff-gk" ]]; then
        ffGK=true;
    elif [[ "$var" == "--allow-live" ]]; then
        allowLive=true;
    elif [[ "$var" == "--no-format" ]]; then
        noFormat=true;
    elif [[ "$var" == "--no-message-verify" ]]; then
        noMessageVerify=true;
    elif [[ "$var" == "-m"  ]] || [[ "$var" == "--message" ]]; then
        message_indicator="next"
    elif [[ "$message_indicator" == "next" ]]; then
        message+=$var;
    fi
done

# Find which packages are still referenced in merged packages:
# ls ./*/status | awk '{print $7}' | awk -F/ '{print $2}' | xargs ./find

#packages=("$@");

warn() {
    yellow=`tput setaf 3`
    reset=`tput sgr0`
    echo "${yellow}${*}${reset}"
}

print() {
    if [[ $verbose -gt 0 ]]; then
        echo "${*}"
    fi
}

info() {
    if [[ $verbose -gt 0 ]]; then
        blue=`tput setaf 4`
        reset=`tput sgr0`
        echo "${blue}${*}${reset}"
    fi
}

debug() {
    if [[ $verbose -gt 1 ]]; then
        magenta=`tput setaf 5`
        reset=`tput sgr0`
        echo "${magenta}${*}${reset}"
    fi
}

pass() {
    green=`tput setaf 2`
    reset=`tput sgr0`
    echo "${green}${*}${reset}"
}

error() {
    red=`tput setaf 1`;
    reset=`tput sgr0`;
    echo "${red}${*}${reset}";
}

# Install all dependencies
if [[ "$noInstall" != "true" ]]; then
    debug "Begining Install";
    if ! command -v clang-format &> /dev/null; then
        debug "Installing clang-format";
        brew install clang-format;
    fi
    if ! command -v brazil &> /dev/null; then
        toolset install brazil;
        error "Brazil is Required to run";
        exit 1;
    fi
    if ! command -v gk-explain &> /dev/null; then
        debug "Installing gordians-knot";
        toolset install gordians-knot;
    fi
    if ! command -v aspell &> /dev/null; then
        debug "Installing aspell";
        brew install aspell;
    fi
    if ! command -v flake8 &> /dev/null; then
        debug "Installing flake8";
        brew install flake8;
    fi
    if ! command -v black &> /dev/null; then
        debug "Installing black";
        brew install black;
    fi
    if ! command -v pre-commit &> /dev/null; then
        debug "Installing pre-commit";
        brew install pre-commit;
    fi
    if ! command -v pmd &> /dev/null; then
        debug "Installing pmd";
        brew install pmd;
    fi

    # inclusivelint
    if ! command -v inclusivelint &> /dev/null; then
        debug "Installing inclusive lint";
        VERSION="0.0.6"

        wget https://github.com/inclusivelint/inclusivelint/releases/download/${VERSION}/inclusivelint -O- | tr -d '\r' >inclusivelint
        wget https://github.com/inclusivelint/inclusivelint/releases/download/${VERSION}/outputRelation.txt -O- | tr -d '\r' >outputRelation.txt

        if mkdir ~/.inclusivelint; then
            mv outputRelation.txt ~/.inclusivelint
        fi

        printInfo "sudo is needed to move inclusivelint binary to /usr/bin"
        if chmod +x inclusivelint && sudo mv inclusivelint /usr/bin; then
            printInfo "Finished intallation. Check if everything is working well running inclusivelint -v"
        fi
    fi

    # checkstyle
    if [[ ! -f ~/Downloads/checkstyle-${CHECK_STYLE_VERSION}-all.jar ]]; then
        debug "Installing Latest checkstyle";
        wget "https://github.com/checkstyle/checkstyle/releases/download/checkstyle-${CHECK_STYLE_VERSION}/checkstyle-${CHECK_STYLE_VERSION}-all.jar" -P ~/Downloads;
    fi
    if ! command -v git-verify-commit-message &> /dev/null; then
        noMessageVerify=true;
        error "Commit Message verify is not setup";
    fi

fi

desc="";

debug "issue: $issue";
debug "branch: $branch";
debug "package: $package";

if [[ -s ~/crTemplate.md ]]; then
    desc+=$(cat ~/crTemplate.md);
    desc+="
    ";
fi
if [[ -s ./crTemplate.md ]]; then
    desc+=$(cat ./crTemplate.md);
    desc+="
    ";
fi
if [[ -s ../crTemplate.md ]]; then
    desc+=$(cat ../crTemplate.md);
    desc+="
    ";
fi
if [[ -s ../../crTemplate.md ]]; then
    desc+=$(cat ../../crTemplate.md);
    desc+="
    ";
fi
if [[ -s ../../../crTemplate.md ]]; then
    desc+=$(cat ../../../crTemplate.md);
    desc+="
    ";
fi

debug "desc: $desc";

notify() {
    if [[ "$noNotify" != "true" ]]; then
        /usr/bin/osascript -e "display notification \"$2\" with title \"$1\" sound name \"$3\"";
    fi
}

results="";
build() {
    info "Cleaning WS";
    brazil ws merge clean;
    brazil ws sync --md;
    brazil-package-cache clean;
    brazil ws clean;

    if [[ "$ffGK" != "true" ]]; then
        gk-fix-mv-conflicts --cleanup;
    else
        gk-fix-mv-conflicts;
    fi

    brazil-recursive-command -allPackages brazil-build;
    brazil-build clean;

    info "Running Build to see if we need to merge in packages";
    print "Building Results";
    debug "Building Results";
    export results=$(brazil-build | tail -n100 | tee /dev/tty);
    if [[ -n $results ]]; then
        if $(echo "$results" | grep -q "Major version conflicts"); then
            error "Pacakge has major version conflicts";
            exit 1;
        fi
        if $(echo "$results" | grep -q "Compile failed"); then
            error "Compile Failed";
            exit 1;
        fi
        if $(echo "$results" | grep -q "Major version conflicts"); then
            error "Package has major version conflicts";
            exit 1;
        fi
        if $(echo "$results" | grep -q "Checkstyle reported errors"); then
            error "Checkstyle Found errors";
            exit 1;
        fi
        if $(echo "$results" | grep -q "Tests FAILED"); then
            error "Unit tests failed";
            exit 1;
        fi
        if $(echo "$results" | grep -q "cannot execute"); then
            error "Can not execute the build";
            exit 1;
        fi
        if $(echo "$results" | grep -q "conflicting class definitions"); then
            error "Found Conflicting class definitions";
            exit 1;
        fi
        if $(echo "$results" | grep -q "BUILD SUCCE"); then
            pass "BUILD SUCCEEDED";
            desc+="Brazil-Build Release: Successful
            ";
            notify $1 "Build was successful" "Glass";
            commit "[X] Brazil-build Release";
        fi
    fi
}

wait(){

    # TODO Skip:
        # Upgrades applied!
        # No inconsistency found
    info "Build Request:"
    debug "$@";
    request=$(echo "$@" | grep "Merge successfully submitted" | awk '{print $5}');
    # This really needs to work... idk why it isn't working.

    if [[ -z "$request" ]]; then
        warn "If there is an error above, you may need to manually add the suggested packages:"
        warn "https://build.amazon.com/merge#{%22destination%22:%22$vs%22,%22options%22:{%22source%22:%22live%22,%22add%22:[]}}"
        read -p "Enter Request ID if present: " request;
    fi

    info "Request: $request";
    if [[ -n "$request" ]]; then
        info "Request exists $request";
        notify $request "Build Request submitted for VS" "Glass";
        brazil pb view --waitForCompletion --request $request;
        status=$(brazil pb --view --status --request $request);
        # BUILD:FAILED | BUILD:IN_PROGRESS | RELEASE:IN_PROGRESS | DONE
        if [[ ! -z $(echo "$status" | grep "BUILD:FAILED") ]]; then
            error "Build Failed for VS Merge";
            notify $request "Build Failed for VS Merge" "Sosumi";
            return
        fi
        pass "Build was successfully completed and released";
        sleep 15s;

        # Pull in new VS from build
        brazil ws sync --md;
    else
        error "Build request is missing";
    fi
}

missing(){
    debug "$1: Adding Packages to VS";
    notify $1 "Build Unsuccessful. Adding Packages to VS" "Sosumi";
    # Submits a build. Releases, but does not wait.
    print "$1: Build Missing Package Versions";
    wait $(brazil vs buildmissingpackageversions -vs $vs);
    # Submits a build. Releases, but does not wait. Same packages as below.
    debug "$1: Merge into VersionSets";
    wait $(brazil vs merge -dest $vs);
    # Submits a build. Waits, but does not release. Claims to be local only?
    debug "$1: Merge into Workspace";
    brazil ws merge clean;
    brazil ws merge --fromTip -cs take-all;

    sleep 30s; # sleep while we release the above `vs merge`
    echo "MERGED" > ../../status;

    build
}

commit() {
    debug "$1";
    rm -rf \$*;
    rm -rf build;
    rm -rf dist;
    git clean -dfx;

    BRANCH="$(git rev-parse --abbrev-ref HEAD)"
    if [[ "$BRANCH" != "mainline" ]]; then
        pass "Already on appropriate branch";
        git branch -u origin/mainline;
    else
        pass "Creating new branch";
        git checkout mainline;
        git checkout -b "$branch" &> /dev/null;
        git checkout "$branch"; # checks out branch if above fails (branch exists)
        git branch -u origin/mainline;
    fi

    if [[ "$noSave" != "true" ]]; then
        git add -A;
        previous=$(git log -1 --pretty=%B);
        if [[ `git rev-list --count "$mainline".."$branch"` -gt 0 ]]; then
            if [[ -n $message ]]; then
                debug "amend message $message";
                if [[ `echo "$previous" | grep "issues" | wc -l` -lt 1 ]]; then
                    git commit --amend -m "$previous" -m "" -m "$message" -m "" -m "https://sim.amazon.com/issues/$issue"
                else
                    git commit --amend -m "$previous" -m "$message";
                fi
            else
                debug "amend previous $previous";
                if [[ `echo "$previous" | grep "issues" | wc -l` -lt 1 ]]; then
                    git commit --amend -m "$previous" -m "" -m "https://sim.amazon.com/issues/$issue"
                else
                    git commit --amend -m "$previous";
                fi
            fi
        else
            debug "No Previous Commit";
            git commit -m "$message" -m "" -m "https://sim.amazon.com/issues/$issue"
        fi
        previous=$(git log -1 --pretty=%B);
        if [[ -n $1 && "$previous$message" == *"$1"* ]]; then
            git commit --amend -m "$previous" -m "$1";
        fi
    fi

    previous=$(git log -1 --pretty=%B);
    if [[ `git rev-list --count "$mainline".."$branch"` -gt 0 ]]; then
        messageValidity=`git verify-commit-message "$previous"`
        debug "Getting previous Message $previous";
        if [[ "$noMessageVerify" != "true"  ]]; then
            debug "Verifying Message";
            if [[ `echo "$messageValidity" | grep -v "no errors" | wc -l` -gt 0 ]]; then
                debug "Message invalid: $messageValidity"
                if [[ "$noSave" != "true"  ]]; then
                    git commit --amend -m "$previous" -m "$messageValidity";
                else
                    warn "$messageValidity";
                fi
            fi
        else
            warn "$messageValidity";
        fi
    fi
}


#################################################################################
#################################################################################
#################################################################################
###########                                                    ##################
###########                     START                          ##################
###########                                                    ##################
###########                                                    ##################
#################################################################################
#################################################################################
#################################################################################

# Quit if VersionSet is live... because something is wrong
vs=$(brazil ws show | grep "Version Set:" | awk -F' ' '{print $3}' | awk -F'@' '{print $1}');
pass $vs;
live="live";
debug "Check for Live VS";
if [[ "$allowLive" != "true" && "$vs" == *"$live"* ]]; then
    error "VersionSet is live; Quitting Program";
    notify $1 "VersionSet is live; Quitting Program";
    exit 1;
fi

# Quit if not inside a git repository
debug "Check for Git Existance";
if [[ "$(git rev-parse --is-inside-work-tree)" != "true" ]]; then
    error "-------------------------------------"
    error "     No Git Repository Detected"
    error "-------------------------------------"
    exit 1;
fi;

# Warn if not in the Repository Root.
debug "Check for root of .git";
if test "$(pwd)" != "$(git rev-parse --show-toplevel)"; then
    warn "Not in the actual working tree:";
    warn "$(pwd)";
    warn "does not match";
    warn "$(git rev-parse --show-toplevel)";
    read -p "Press enter to confirm that this is ok."
fi;

notify $issue "Begin Processing $issue in $package" "Frog";
# Change Platform for AL2 for all pacakges
brazil ws use --platform AL2_x86_64;

debug "Set main branch to $parent or mainline";
mainline=$parent;
if [ -z "${mainline}" ]; then
    mainline="mainline";
fi

commit "Prep-CR Checklist:";
info "Rebasing ${branch} in relation to ${mainline}";
git checkout ${mainline};
git pull;
if [[ -n "$(git branch --list $branch)" ]]; then
    git checkout ${branch};
else
    git checkout -b ${branch};
fi
git rebase --interactive ${mainline}; # --autostash #--ignore-whitespace

if [[ -s ../../static_analysis ]]; then
    rm ../../static_analysis;
fi

if [[ "$noFormat" != "true"  ]]; then
    debug "Begin formatting changed files";
    changed_python_files=$(git diff --cached --name-only --diff-filter=ACMR ${mainline} | grep ".*py$" );
    if [[ -n $changed_python_files ]]; then
        if command -v black &> /dev/null; then
            debug "black --line-length=100";
            black ./* --line-length=100;
        else
            debug "Python Formatter is not installed";
        fi
        if command -v flake8 &> /dev/null; then
            debug "flake8";
            flake8;
        else
            debug "Flake8 is not installed";
        fi
    fi

    ### Google Style guide
    debug "Fetching Changed Java Files";
    changed_java_files=$(git diff --cached --name-only --diff-filter=ACMR ${mainline} | grep -v "t.st/" grep ".*java$" );
    info $changed_java_files;
    if [[ -n $changed_java_files ]]; then
        debug "google java";
        debug $changed_java_files;
        mkdir -p .cache;
        cd ~/.cache;
        if [ ! -f google-java-format-1.7-all-deps.jar ];
        then
            curl -LJO "https://github.com/google/google-java-format/releases/download/google-java-format-1.7/google-java-format-1.7-all-deps.jar";
            chmod 755 google-java-format-1.7-all-deps.jar;
        fi
        cd -;

        java -jar ~/.cache/google-java-format-1.7-all-deps.jar --replace $changed_java_files;
        ### Google Style guide

        if command -v clang-format &> /dev/null; then
            debug "clang Google";
            cp ~/ruleset/.clang-format ./;
            git diff --name-only --diff-filter=AM $mainline | grep -v "Config" | grep -v "yaml" | grep -v ".md" | xargs clang-format -style=file -i
            rm ./.clang-format;
        else
            debug "Clang is not installed";
        fi
    fi
    if command -v pre-commit &> /dev/null; then
        debug "pre-commit";
        pre-commit run --from-ref mainline --to-ref HEAD --color always -c ~/ruleset/.pre-commit-config.yaml;
    else
        debug "Pre-commit is not installed";
    fi

    if command -v pmd &> /dev/null; then
        debug "pmd";
        if [[ -n $changed_java_files ]]; then
            echo $changed_java_files | sed 's/ /,/g' > ../../files_changed;
            pmd pmd -filelist ../../files_changed -f text -R ~/ruleset/quickstart.xml > ../../static_analysis;
            rm ../../files_changed;
        fi
        pmd cpd --minimum-tokens 100 --files src/ >> ../../static_analysis;
    else
        debug "PMD is not installed";
    fi
    if [[ -f "~/Downloads/checkstyle-${CHECK_STYLE_VERSION}-all.jar" ]]; then
        if [[ -n $changed_java_files ]]; then
            debug "checkstyle";
            cp ~/ruleset/checkstyle-config.xml ./;
            java -jar "~/Downloads/checkstyle-${CHECK_STYLE_VERSION}-all.jar" -c checkstyle-config.xml  -f="plain" src/ tst/ >> ../../static_analysis;
            rm ./checkstyle-config.xml;
        fi
    else
        debug "Checkstyle is not installed";
    fi
    commit "[X] Formatting"; # Save changes after checkstyle is run
    pass "Formatting was Successful";
fi

if [[ -s ../../static_analysis && $ignore -lt 1 ]]; then
    error "Changes are needed from static Analysis" >&2;
    notify $issue "Static Analysis was not successful for $package" "Sosumi";
    exit 1;
else
    desc+="Static Analysis: Successful
    ";
    commit "[X] Static Analysis"; # Save changes after checkstyle is run
    pass "Static Analysis was Successful";
fi

if [[ -s ../../exclusives_found ]]; then
    rm ../../exclusives_found;
fi

cd ../;
if command -v inclusivelint &> /dev/null; then
    inclusivelint -r -p ./*/ | grep -viIE "add|invalid|host|hang|just|postman" | grep "Line" > ../../static_analysis;
    cd $package;
fi

if [[ -s ../../exclusives_found && $ignore -lt 2 ]]; then
    error "Changes are needed from Inclusive Analysis" >&2;
    echo "$exclusives";
    cat "$exclusives" > ../../exclusives_found;
    notify $issue "Inclusive Analysis was not successful for $package" "Sosumi";
    exit 1;
else
    desc+="Inclusive Analysis: Successful
    ";
    commit "[X] Inclusive Analysis";
    pass "Inclusive Analysis was Successful";
fi

###################### SAS RISKS ###########################################
debug "SAS risks";

source /Users/ailor/.scripts/replace

desc+="Remove direct SAS risks: Successful
";
commit "[X] SAS"; # Save changes after Risks are updated
pass "SAS updates were Successful";
debug "Updated SAS Risks Successfully";

###################### SAS RISKS ###########################################

if  [[ "$noGK" != "true"  ]] && command -v gk-explain &> /dev/null; then

    debug "Running Gordian's knot block";
    brazil ws merge clean;
    brazil ws sync --md;
    brazil-package-cache clean;
    brazil ws clean;

    info "Fixing packages with GK: Analyze Guidance";
    notify $1 "Fixing packages with GK: Guidance" "ROBTVox_Notification la";
    # Build command does not wait.
    # The build command is pulled from the output of the gk command
    # The GK Command doesn't seem to have an impact until after
    # The build is run/synced
    if [[ "$ffGK" != "true" ]]; then
        guidance=$(gk-analyze-guidance --interactive | tee /dev/tty); # Add `unbuffer` at begining to get colors
    else
        guidance=$(yes s | gk-analyze-guidance --interactive | tee /dev/tty); # Add `unbuffer` at begining to get colors
    fi
    # Submits a build. Releases, but does not wait. Same packages as below.
    debug "$guidance";
    wait "$(`echo "$guidance" | grep "brazil vs merge"`)";
    # Updates Config File within package:
    brazil ws merge clean;
    brazil ws sync --md;
    eval "$(echo "$guidance" | grep "gk-analyze-guidance --interactive --select")"

    info "Fixing packages with GK: Analyze Inconsistencies";
    notify $1 "Fixing packages with GK: Analyze Inconsistencies" "ROBTVox_Notification la";
    inconsistencies=$(gk-analyze-inconsistencies --interactive | tee /dev/tty);
    # Submits a build. Releases, but does not wait. Same packages as below.
    wait "$(`echo "$guidance" | grep -o "brazil vs merge .*"`)";
    # Updates Config File within package:
    brazil ws merge clean;
    brazil ws sync --md;
    eval "$(echo "$inconsistencies" | grep "gk-analyze-inconsistencies --interactive --select")"


    info "Fixing packages with GK: Fix Conflicts";
    notify $1 "Fixing packages with GK: Fix Conflicts" "ROBTVox_Notification la";
    # Prompts regarding conflicts already in VS
    if [[ "$ffGK" != "true" ]]; then
        gk-fix-mv-conflicts --cleanup;
    else
        gk-fix-mv-conflicts;
    fi

    gk-analyze-all;

    desc+="Gordian's Knot Analysis: Successful
    ";
    commit "[X] Gordian's Knot Analysis"; # Save changes after checkstyle is run
    pass "Gordian's Knot sucessful";
else
    debug "Not running Gordian's knot";
fi

# Submits a build.
#brazil vs removemajorversions -vs $vs;
build;

if [[ -n $results ]]; then
    if $(echo "$results" | grep -q "BUILD SUCCE"); then
        commit "[X] Build was Successful";
    else
        missing;
    fi
fi

test_results=$(brazil-build test | tee /dev/tty);
if [[ -n $test_results ]]; then
    if $(echo "$test_results" | grep -q "FAILED"); then
        error "Test Build failed for $1";
        notify $1 "Test Build was not successful for $1" "Sosumi";
        exit 1;
    fi
fi

pass "CR Description:"
print "$desc";

if [[ -n $results ]]; then
    if $(echo "$results" | grep -q "BUILD SUCCESSFUL"); then
        git commit --amend; # Edit commit message before opening the CR.
        if [[ "$nocr" != "true"  ]]; then
            read -p "Press enter to open a CR"
            cr --all --description "$desc" --issue $issue --parent origin/mainline --amend --open --reviewers team:kindle-rl-dev:2
        fi
        if [[ "$questions" != "true"  ]]; then
            echo "- Does the code work? Check whether function and logic are correct.";
            echo "- Are functions, methods, and variables adequately named?";
            echo "- Are names semantic and meaningful for your business?";
            echo "- Is it well tested?";
            echo "- Are there unit tests, and they have good quality? Do they test the functionality?";
            echo "- Do tests reach acceptable coverage for your project?";
            echo "- Is the code clear and easy to understand?";
            echo "- Does it meet the team’s guidelines and style guides?";
            echo "- Is there any duplicated code?";
            echo "- Is there any commented or unnecessary code?";
            echo "- Does the code take the most out of frameworks and language? Is there any custom implementation of native or already-existing functions?";
            echo "- Are there code smells, grey areas, or bug-prone?";
            echo "- Is documentation on functions, methods, classes, contexts, and behaviors adequate?";
            echo "- Is the code as modular as possible?";
            echo "- Are the critical spots adequately logged?";
            echo "- Does the code consider failures? Is it just considering the happy path?";
            echo "- Are there better or simpler solutions?";
            echo "- Is there any performance issue?";
            echo "- Is sensitive information being encoded or encrypted?";
        fi
    else
        error "Build was not successful for $1";
        notify $1 "Build was not successful for $1" "Sosumi";
    fi
else
    error "No Build result was found $1";
    notify $1 "No Build result was found $1" "Sosumi";
fi
