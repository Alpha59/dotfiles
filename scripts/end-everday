#!/usr/bin/env bash
# shellcheck disable=SC1091
#
# Copyright 2023 Jake Ailor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#==============================================================================
#title           :
#description     :
#author          : AILOR, JAKE
#email           : jakeailor@gmail.com
#date            :
#version         : 1.0.0
#notes           :
#==============================================================================

#set -e
#set -o pipefail

############################################################
# CHECK INSTALLED PROGRAMS                                 #
############################################################
# TODO: List the required Programs as strings:
# Get the print functions that we need
if [[ -e $HOME/helpers/check-installs ]]; then
    # shellcheck source=$HOME/helpers/check-installs
    $HOME/helpers/check-installs gum vit timew toilet pmset battery-status cowsay fast icalBuddy task cig ncal youtube-viewer cmatrix; # list of required programs as strings
fi
############################################################
# PRE-PROCESS ARGS                                         #
############################################################
# Pre-process the args to split them
# from -xyz to -x -y -z
# and --output=file.txt to --output file.txt
# TODO: MAKES $STDIN available
if [[ -e $HOME/helpers/pre-process ]]; then
    # shellcheck source=$HOME/helpers/pre-process
    source "$HOME/helpers/pre-process";
fi

if [[ $0 =~ "add-bash-header" ]]; then
    PROGRAM_NAME="$(basename "$1")";
else
    PROGRAM_NAME="$(basename "$0")";
fi
############################################################
# GET CONFIG FILE (yaml)                                         #
############################################################
# Pre-process the args to split them
# from -xyz to -x -y -z
# and --output=file.txt to --output file.txt
if [[ -e $HOME/helpers/config ]]; then
    # shellcheck source=$HOME/helpers/config
    source "$HOME/helpers/config";
fi
############################################################
# CREATES ALL OF THE PRINT FUNCTIONS                       #
############################################################
# Get the print functions that we need
if [[ -e $HOME/helpers/print-functions ]]; then
    # shellcheck source="$HOME/helpers/print-functions"
    source "$HOME/helpers/print-functions";
fi
############################################################
# Help SET VERSION AND USAGE Vars HERE                     #
############################################################
if [[ -f "$HOME/.cheat/$PROGRAM_NAME" ]]; then
    EXAMPLES="$(cat "$HOME/.cheat/$PROGRAM_NAME")";
else
    EXAMPLES="";
fi
############################################################

# TODO: Variables that need to be set should be added here:
VERSION="1.0.0"
USAGE="
$PROGRAM_NAME is a program designed to help add defaults and functions to my bash scripts.
If you are seeing this message, it means that the HELP has not been updated
properly.

usage: $PROGRAM_NAME [-v][-v][--help][--version]

    OPTIONS:
        no known options
";

POSITIONAL_NUMBER_MIN=0;
if [[ -e $HOME/helpers/help ]]; then
    source "$HOME/helpers/help";
fi

############################################################
# Add interactive functionality (default)                  #
############################################################
DEFAULT="true";
INTERACTIVE="false";
if [[ -e $HOME/helpers/interactive ]]; then
    # shellcheck source=$HOME/helpers/traps
    source "$HOME/helpers/interactive";
fi

# interact accepts all gum options with the difference of "default" being the second option.
#
#usage: interact_prompt "Default" "Choose one of the following options:"
#usage: tst=$(interact choose "Default" "Default" "Test" "Test1" "Test2");
#pass "Test Result = $tst";

############################################################
# Catch interuptions and request abortion                  #
############################################################
if [[ -e $HOME/helpers/traps ]]; then
    # shellcheck source=$HOME/helpers/traps
    source "$HOME/helpers/traps";
fi
# Uncomment to force a double Ctrl-C on exit
#trap on_interrupt INT
# Uncomment to force root
#assert_root
# TODO: CLIPBOARD_OUTPUT should be set when appropraite
############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options

POSITIONAL_ARGS=()

# TODO: Variables that need to be set are here:
while [[ $# -gt 0 ]]; do
  case $1 in
    --arg-test)
        ARG_TEST="$2"
        shift # past argument
        shift # past value
        ;;
     \?) # Invaid option
        error "Error: Invalid option"
        Help;
        exit 1;
        ;;
    -*)
        error "Unknown option $1"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ $# -lt $POSITIONAL_NUMBER_MIN ]; then
    error "Please specify $POSITIONAL_NUMBER_MIN positional argument ($# were specified)";
    exit 1;
fi

if [[ -n "$ARG_TEST" ]]; then
    echo "ARGUMENT TEST: $ARG_TEST";
    echo "DEFAULT: $DEFAULT";
    echo "INTERACTIVE: $INTERACTIVE";
    echo "VERSION: $VERSION";
    echo "USAGE: $USAGE";
    echo "EXAMPLES: $EXAMPLES";
fi

############################################################
############################################################
# Main program                                             #
############################################################

cd ~ || exit;
toilet --filter border --filter crop --metal -t " Good Bye, Jake ";
pass "Connected to Wifi: $(wifi-name)";

#notes save;
pmset -g stats;
pmset -g therm;
pmset -g sched;
pmset -g adapter;
battery-status;
echo "";
cowsay -f "$(cowsay -l | shuf -n1 | head -n1 | cut -d " " -f1)" "Hello Jake,$(fortune)";
#review-tabs -1;

warn "Testing Internet Speed:"
fast --upload;
/opt/cisco/anyconnect/bin/vpn disconnect;
echo "Testing Internet Speed $(timeout 30s speedtest)";

# Local Weather
readesc INPUT "Hit enter/esc to continue to view Weather Reports";
clear;

curl wttr.in/philadelphia?uF;
curl wttr.in/moon?F;
toilet -t --filter border --metal "$(date)";
print_magenta "aka: $(ddate)";
# Local Weather
readesc INPUT "Hit enter/esc to continue to view Calendar";
icalBuddy eventsToday+3

readesc INPUT "Hit enter/esc to continue to the work information";
clear;
# Work from Today
task end.after:yesterday completed;
echo "Display information on modified git Repos:"
cig;
git standup -m 5 -F -s -d 1;
ncal -3;
readesc INPUT "Hit enter/esc to continue to todays tasks";
vit;
signoff="""
It's time to call it a day! I hope you all have a good rest of the day. If you need anything, please don't hesitate to reach out to me via Slack. I will do my best to respond in a timely manner. Have a great evening!
As I finish up my work for the day, have a good restof the day. If there is anything I can help with, please don't hesitate to contact me via Slack. I'll do my best to respond as quickly as possible.
I am wrapping up work, and signing off for the day. I hope you all have a great rest of the day. If you need anything, don't hesitate to reach out to me via Slack. I will try to answer in a reasonable amount of time.
It's been a productive day, and now it's time to wrap up and sign off. I hope you all have a great rest of the day. If you need anything, please don't hesitate to reach out to me via Slack. I'll be sure to respond to your messages as soon as I can.
Completing my work for today and signing off. Have a great rest of the day. If you need anything, let me know through Slack and I'll respond as soon as I can.
Finishing up my tasks and signing off for the day. Have a good rest of the day. If you have any needs, don't hesitate to contact me on Slack and I'll reply as soon as possible.
Wrapping up my tasks and signing off. Have a great rest of the day. If you need anything, feel free to reach out to me via Slack and I'll get back to you as soon as I can.
Finishing my work and signing off. Have a great day. If you need anything, just let me know through Slack and I'll reply as soon as I can.
Wrapping up my work and signing off. Have a good rest of the day. If you need anything, don't hesitate to contact me on Slack and I'll respond in a timely manner.
Completing my work for the day and signing off. Have a great rest of the day. If you have any needs, just let me know through Slack and I'll answer as soon as I can.
Finishing up my tasks and signing off for the day. Have a great rest of the day. If you need anything, don't hesitate to reach out to me via Slack and I'll reply in a reasonable amount of time.
Wrapping up my tasks and signing off. Have a great rest of the day. If you need anything, feel free to contact me on Slack and I'll get back to you as soon as I can.
Finishing my work and signing off. Have a good rest of the day. If you have any needs, just let me know through Slack and I'll respond as soon as I can.
Wrapping up my work and signing off. Have a great day. If you need anything, don't hesitate to reach out to me via Slack and I'll get back to you in a timely manner.
Completing my work for today and signing off. Have a good rest of the day. If you have any needs, just let me know through Slack and I'll answer as soon as I can.
Finishing up my tasks and signing off for the day. Have a great rest of the day. If you need anything, don't hesitate to contact me on Slack and I'll reply in a reasonable amount of time.
Wrapping up my tasks and signing off. Have a great rest of the day. If you need anything, feel free to reach out to me via Slack and I'll get back to you as soon as I can.
Finishing my work and signing off. Have a great day. If you have any needs, just let me know through Slack and I'll respond as soon as I can.
Wrapping up my work and signing off. Have a good rest of the day. If you need anything, don't hesitate to reach out to me via Slack and I'll get back to you in a timely manner.
Completing my work for today and signing off. Have a great rest of the day. If you have any needs, just let me know through Slack and I'll answer as soon as I can.
Finishing up my tasks and signing off for the day. Have a good rest of the day. If you need anything, don't hesitate to contact me on Slack and I'll reply in a reasonable amount of time.
Wrapping up my tasks and signing off. Have a good rest of the day. If you need anything, feel free to reach out to me via Slack and I'll get back to you as soon as I can.
Finishing my work and signing off. Have a great day. If you have any needs, just let me know through Slack and I'll respond as soon as I can.
Wrapping up my work and signing off. Have a great rest of the day. If you need anything, don't hesitate to reach out to me via Slack and I'll get back to you in a timely manner.
"""
slackSignoff="$(echo "$signoff" | shuf -n1)";
print_magenta "Sending slack message to channel (n) to not send";
print_blue "$slackSignoff";
read -r CONFIRM;
if [[ "$CONFIRM" != "n" ]]; then
    pass "Sending Slack message";
    slack-adrl-chatter "$slackSignoff";
else
    warn "Slack message not sent";
fi
timew stop;
timew day;
timew week;
readesc INPUT "Hit enter/esc to continue to Youtube. :q will quit youtube";
if [ "$(date +%u)" -eq 1 ]; then #
    youtube-viewer "(ColbertLateShow|LateNightSeth|TheDailyShow) -interview" --autoplay --min-seconds=60 --skip-watched --within=5d --get-captions --auto-captions -rp --best;
else #
    youtube-viewer "(ColbertLateShow|LateNightSeth|TheDailyShow) -interview" --autoplay --min-seconds=60 --skip-watched --within=1d --get-captions --auto-captions -rp --best;
fi #
cmatrix -s;
