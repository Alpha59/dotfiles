#!/usr/bin/env bash
# shellcheck disable=SC1091
#
# Copyright 2023 Jake Ailor
#
# This program is free software: you can redistribute it and/or modify
# it under the terms of the GNU General Public License as published by
# the Free Software Foundation, either version 3 of the License, or
# (at your option) any later version.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License
# along with this program.  If not, see <http://www.gnu.org/licenses/>.
#==============================================================================
#title           : append-to-top
#description     : appends text to the top of an existing file
#author          : AILOR, JAKE
#email           : jakeailor@gmail.com
#date            :
#version         : 1.0.0
#notes           :
#==============================================================================

set -e
set -o pipefail

############################################################
# CHECK INSTALLED PROGRAMS                                 #
############################################################
# Get the print functions that we need
if [[ -e $HOME/helpers/check-installs ]]; then
    # shellcheck source=$HOME/helpers/check-installs
    $HOME/helpers/check-installs; # list of required programs as strings
fi
############################################################
# PRE-PROCESS ARGS                                         #
############################################################
# Pre-process the args to split them
# from -xyz to -x -y -z
# and --output=file.txt to --output file.txt
# TODO: MAKES $STDIN available
if [[ -e $HOME/helpers/pre-process ]]; then
    # shellcheck source=$HOME/helpers/pre-process
    source "$HOME/helpers/pre-process";
fi
############################################################
# GET CONFIG FILE (yaml)                                         #
############################################################
# Pre-process the args to split them
# from -xyz to -x -y -z
# and --output=file.txt to --output file.txt
if [[ -e $HOME/helpers/config ]]; then
    # shellcheck source=$HOME/helpers/config
    source "$HOME/helpers/config";
fi
# CONFIG FILE is in '$HOME/$(basename $1)/config.yml'
CONFIG_YAML="
global:
    verbose: 0
    quiet: 0
    clipboard: false
    output: ""
";
# Config will output as
#       global_verbose=0
#       global_quiet=0
#       global_clipboard=false
#       global_output=./file-name
############################################################
# CREATES ALL OF THE PRINT FUNCTIONS                       #
############################################################
# Get the print functions that we need
if [[ -e $HOME/helpers/print-functions ]]; then
    # shellcheck source="$HOME/helpers/print-functions"
    source "$HOME/helpers/print-functions";
fi
############################################################
# Help SET VERSION AND USAGE Vars HERE                     #
############################################################
if [[ -f "$HOME/.cheat/$(basename "$0")" ]]; then
    EXAMPLES="$(cat "$HOME/.cheat/$(basename "$0")")";
else
    EXAMPLES="";
fi
############################################################

if [[ $0 =~ "add-bash-header" ]]; then
    PROGRAM_NAME="$(basename "$1")";
else
    PROGRAM_NAME="$(basename "$0")";
fi

VERSION="0.1.0"
USAGE="
$PROGRAM_NAME appends the text or file passed in to the top of the existing file.

usage: $PROGRAM_NAME file-to-append file-to-get-text [-v][-v][--help][--version]

    OPTIONS:
        no known options
";

POSITIONAL_NUMBER_MIN=1;
if [[ -e $HOME/helpers/help ]]; then
    source "$HOME/helpers/help";
fi

############################################################
# Catch interuptions and request abortion                  #
############################################################
if [[ -e $HOME/helpers/traps ]]; then
    # shellcheck source=$HOME/helpers/traps
    source "$HOME/helpers/traps";
fi
# Uncomment to force a double Ctrl-C on exit
#trap on_interrupt INT
# Uncomment to force root
#assert_root
############################################################
# Process the input options. Add options as needed.        #
############################################################
# Get the options

POSITIONAL_ARGS=()

DEFAULT="NO";
while [[ $# -gt 0 ]]; do
  case $1 in
    --arg-test)
        ARG_TEST="$2"
        shift # past argument
        shift # past value
        ;;
    --default)
        DEFAULT="YES";
        shift # past argument
        ;;
     \?) # Invaid option
        error "Error: Invalid option"
        Help;
        exit 1;
        ;;
    -*)
        error "Unknown option $1"
        exit 1
        ;;
    *)
        POSITIONAL_ARGS+=("$1") # save positional arg
        shift # past argument
        ;;
  esac
done

set -- "${POSITIONAL_ARGS[@]}" # restore positional parameters

if [ $# -lt $POSITIONAL_NUMBER_MIN ]; then
    error "Please specify $POSITIONAL_NUMBER_MIN positional argument ($# were specified)";
    exit 1;
fi

############################################################
############################################################
# Main program                                             #
############################################################
#############################################################
file=$1;
shift;

if [[ -f "$1" ]]; then
    output="$(cat "$1") $STDIN";
    pass "Using file $1";
else
    output="$(echo "$*") $STDIN";
    warn "Using file $1";
fi

new_text="$output
$(cat "$file")";

CLIPBOARD_OUTPUT+=$new_text;
echo "$new_text" > "$file";
