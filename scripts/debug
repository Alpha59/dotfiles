#!/usr/bin/env bash

cat <<EOF
    Welcome to debugging. Please start the application on a debug port of 9999 in order to continue.

    Breakpoints
        Breakpoints can be set in jdb at line numbers or at the first instruction of a method, for example:

        stop at MyClass:22 (sets a breakpoint at the first instruction for line 22 of the source file containing MyClass)
        stop in java.lang.String.length (sets a breakpoint at the beginnig of the method java.lang.String.length)
        stop in MyClass.<init> (<init> identifies the MyClass constructor)
        stop in MyClass.<clinit> (<clinit> identifies the static initialization code for MyClass)

        clear at ...
        clear in ...

    Program Execution

        run
            After starting jdb, and setting any necessary breakpoints, you can use this command to start the execution the debugged application.
        cont
            Continues execution of the debugged application after a breakpoint, exception, or step.
        print

            print supports many simple Java expressions including those with method invocations, for example:

                print MyClass.myStaticField
                print myObj.myInstanceField
                print i + j + k (i, j, k are primities and either fields or local variables)
                print myObj.myMethod() (if myMethod returns a non-null)
                print new java.lang.String("Hello").length()

        step
            The step commands advances execution to the next line whether it is in the current stack frame or a called method.
        next
            The next command advances execution to the next line in the current stack frame.
EOF

debug_port=$(ps -fu ${USER} | grep dt_socket | grep -v docker | sed 's/.*address=localhost:\([0-9]*\).*/\1/' | sort -u | grep -v grep | head -n1);

echo "Debug Port: $debug_port";

if [[ -n $debug_port ]]; then
    rlwrap -c -i -I jdb -attach $debug_port;
else
    rlwrap -c -i -I jdb -listen 9999;
fi
