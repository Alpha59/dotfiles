#!/usr/bin/env bash

show_help(){
  echo "";
  echo "";
  echo "usage: $0 [dir] [string]";
  echo "";
  echo "    dir The directory to be compressed";
  echo "    string The string to be decompressed";
  echo "    -d,--decompress Decompress instead of Compressing";
  echo "    -o,--output directory to send output";
  echo "    -h,--help Brings up this menu";
  echo "    -v,--verbose increases verbosity";
  echo "";
  echo "";

  echo "e.g.";
  echo "";
  echo "    compress-dir-json .";
  echo "        Compresses the current directory to stdout";
  echo "    compress-dir-json . -o out/";
  echo "        Compresses the current directory to out/output.json";
  echo "    echo {} | compress-dir-json -d -o .";
  echo "        Decompresses the input to the current directory";
  echo "    compress-dir-json {} -d -o .";
  echo "        Decompresses the input to the current directory";
  echo "    echo {} | compress-dir-json -d";
  echo "        Decompresses the input to stdout";
  echo "    compress-dir-json -d {}";
  echo "        Decompresses the input to stdout";
  echo "";
  echo "";
  exit 1;
}

source ~/scripts/print-functions;

debug() {
    if [[ $verbose -gt 1 ]]; then
        magenta=`tput setaf 5`
        reset=`tput sgr0`
        echo "${magenta}${*}${reset}"
    fi
}

OUTPUT_DIR="."
DECOMPRESS="false"
POSITIONAL=()
if test ! -t 0; then
    debug "Reading from stdin"
    PIPED_IN=$(cat)
fi
while [[ $# -gt 0 ]]; do
  key="$1"

  case $key in
    -d|--decompress)
      DECOMPRESS=true
      shift # past argument
      ;;
    -o|--out)
      OUTPUT_DIR=$2
      shift # past argument
      shift # past value
      ;;
    -v|--verbose)
      verbose+=1;
      shift
      ;;
    -h|--help)
        show_help;
      ;;
    *)    # unknown option
      POSITIONAL+=("$1") # save it in an array for later
      shift # past argument
      ;;
  esac
done

debug "Number of positional arguments: ${POSITIONAL[*]}"
debug "Should Decompress: $DECOMPRESS"
debug "Positional ${POSITIONAL[*]}";
if [[ "${#POSITIONAL[*]}" -lt 2  &&  "$DECOMPRESS" != "true" ]]; then
    INPUT_DIR="${POSITIONAL[0]}";
    FILES=""
    if [[ $INPUT_DIR != "" ]]; then
        debug "Looking for files..."
        FILES+=$(find $INPUT_DIR -type f -not -path '*/\.git/*' -not -path '*/package-lock.json');
    else
        INPUT_DIR="/";
    fi
    if [[ $PIPED_IN != "" ]]; then
        FILES+=" $PIPED_IN";
    fi

    json="{}";
    debug "$FILES";
    debug $INPUT_DIR
    for f in $FILES; do
        file=$(echo $f | sed "s|.*$INPUT_DIR/*||g" | sed "s|/|\.|g" | sed "s|-|_|g" | sed "s|^\.*||g");
        if [[ -f "$f" ]]; then
            debug "$f $file"
            encoded=$(cat $f | base64);
            json=$(echo $json | jq ".$file |= \"$encoded\"");
        fi
    done
    if [[ $OUTPUT_DIR == "" ]]; then
        echo $json | jq;
    else
        mkdir -p "$(dirname "$OUTPUT_DIR/output.json")";
        echo $json | jq > $OUTPUT_DIR/output.json
    fi
elif [[ "${#POSITIONAL[*]}" -lt 2 && "$DECOMPRESS" == "true" ]]; then
    if [[ "${#POSITIONAL[*]}" -eq 1 ]]; then
        debug "Using Positional Argument";
        INPUT=$(cat "${POSITIONAL[0]}");
    else
        debug "Using Piped Input";
        INPUT=$PIPED_IN;
    fi
    debug "Decompressing";
    IFS=$'\n' FILE_ARRAY=($(echo "$INPUT" | jq -r '[paths(scalars)] | map(join("/")) | map(sub("/(?<a>(html|md|ts|js|scss|tsx|jpg|png|json|py|yml|yaml|ini|txt|devenv)$)"; ".\(.a)")) | .[] | tostring'));
    IFS=$'\n' FILE_PATHS=($(echo "$INPUT" | jq -r -c '[paths(scalars)]| .[]'));
    debug "${FILE_PATHS[*]}";
    debug "${FILE_ARRAY[*]}";
    debug "${#FILE_ARRAY[*]}";
    for ((i=0;i<"${#FILE_ARRAY[*]}";i++)); do
        debug "$i";
        file=$(echo "${FILE_ARRAY[$i]}" | sed 's/\([^_]\)_\([^_]\)/\1-\2/g');
        decoded=$(echo $INPUT | jq -r --argjson file_path "${FILE_PATHS[$i]}" 'getpath($file_path)' | base64 -d);
        mkdir -p "$(dirname "$OUTPUT_DIR/$file")";
        echo "$decoded" > "$OUTPUT_DIR/$file";
        debug "${FILE_PATHS[$i]}: $decoded -> $file";
    done
    mv "$OUTPUT_DIR/gitignore" "$OUTPUT_DIR/.gitignore";
    mv "$OUTPUT_DIR/babel/config.js" "$OUTPUT_DIR/babel.config.js";
    mv "$OUTPUT_DIR/configuration/webpack/config.js" "$OUTPUT_DIR/configuration/webpack.config.js";
    mv "$OUTPUT_DIR/gitignore" "$OUTPUT_DIR/.gitignore";
    mv "$OUTPUT_DIR/configuration/aws-lambda" "$OUTPUT_DIR/configuration/aws_lambda";
else
    show_help;
fi;

